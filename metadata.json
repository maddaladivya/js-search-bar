{"updated_at": 1510559297, "artificial_intelligence/decision_tree": ["data_banknote_authentication.csv", "Decision_Tree.py"], "artificial_intelligence/factorization_machines": ["README.md"], "artificial_intelligence/gaussian_mixture_model": ["README.md"], "artificial_intelligence/gradient_boosting_trees": ["README.md"], "artificial_intelligence/hierachical-clustering": ["hierachical_clustering.cpp", "README.md"], "artificial_intelligence/k_means": ["k_means.cpp", "k_means.py", "k_means.swift", "README.md"], "artificial_intelligence/k_Nearest_Neighbours": ["iris.data", "k_Nearest_Neighbours.py"], "artificial_intelligence/Linear_Regression": ["linear_regression.py", "linear_regression.swift", "LinearRegression.java", "linearRegression.js", "README.md"], "artificial_intelligence/Logistic_Regression": ["Logistic_Regression.py", "README.md"], "artificial_intelligence/naive_bayes": ["naive_bayes.swift", "README.md"], "artificial_intelligence/nearest_sequence_memory/nsm_MATLAB": ["main.m", "nsm_agent.m", "simulator.m"], "artificial_intelligence/neural_network": ["neuralnetwork.py"], "artificial_intelligence/principal_component_analysis": ["pca.py", "README.md"], "artificial_intelligence/q_learning": ["qLearning.js", "README.md"], "artificial_intelligence/random_forests": ["README.md"], "artificial_intelligence/restricted_boltzmann_machine": ["README.md"], "artificial_intelligence/SAT": ["togasat.cpp"], "artificial_intelligence/support_vector_machine": ["README.md"], "artificial_intelligence/t_distributed_stochastic_neighbor_embedding": ["README.md"], "artificial_intelligence/TSP": ["algo.md", "euc_100", "euc_250", "euc_500", "Makefile", "noneuc_100", "noneuc_250", "noneuc_500", "salesman.cpp"], "backtracking/algorithm-x": ["algo-x.cpp", "README.md"], "backtracking/crossword_puzzle": ["CrosswordPuzzle.java"], "backtracking/knight_tour": ["knight_tour.c", "knight_tour.cpp", "knight_tour.go", "knight_tour.java", "knight_tour.py", "knight_tour.rs", "knight_tour_withoutBT.c", "README.md"], "backtracking/n_queen": ["n _queen.c", "nqueen.go", "nQueen.hs", "NQueen.java", "nqueen.py", "NQueen_Backtracking.cpp", "Nqueen_Backtracking.rs", "nqueen_bit.go", "NQueen_BitImp.cpp", "NQueen_Bitset.cpp", "README.md"], "backtracking/number_of_ways_in_maze": ["no_of_ways_in_maze.go", "no_of_ways_in_maze.java", "no_of_ways_in_maze.rs", "noOfWaysinMaze.c", "number_of_ways_in_maze.cpp", "README.md"], "backtracking/partitions_of_number": ["partitions_of_number.cpp", "partitions_of_number.go", "partitions_of_number.rs", "README.md"], "backtracking/partitions_of_set": ["README.md", "set_partitions.cpp", "set_partitions.go"], "backtracking/permutations_of_string": ["permutations_of_string.c", "permutations_of_string.go", "permutations_of_string.kt", "permutations_of_string.py", "permutations_of_string_itertools.py", "permutations_of_string_stl.cpp", "README.md"], "backtracking/powerset": ["powerset.go", "PowerSet.java"], "backtracking/rat_in_a_maze": ["rat_in_a_maze.cpp", "README.md"], "backtracking/subset_sum": ["README.md", "Subset_Sum.c", "subset_sum.cpp", "subset_sum.go", "Subset_Sum_Duplicates.py", "SubsetSum.java", "SubsetSum.py"], "backtracking/sudoku_solve": ["README.md", "sudoku_solve.py", "SudokuSolve.c", "SudokuSolve.cpp"], "bit-manipulation/bit_division": ["bitDivision.c", "bitDivision.go", "BitDivision.java", "bitDivision.js", "bitDivison.py", "README.md"], "bit-manipulation/byte_swapper": ["ByteSwapper.java"], "bit-manipulation/convert_number_binary": ["binary_to_int.py", "convert_number_binary.c", "convert_number_binary.cpp", "convert_number_binary.hs", "convert_number_binary.js", "convert_number_binary.php", "ConvertNumberBinary.java", "intToBinary.py", "README.md"], "bit-manipulation/count_set_bits": ["count_set_bits.c", "count_set_bits.cpp", "count_set_bits.py", "count_set_bits_lookup_table.cpp", "CountSetBits.java", "countSetBits.js", "README.md"], "bit-manipulation/flip_bits": ["FlipBits.java", "flippingbits.c", "flippingbits.cpp", "flippingbits.py", "README.md"], "bit-manipulation/hamming_distance": ["hamming_distance.c", "hamming_distance.cpp", "hamming_distance.java", "hamming_distance.py", "hamming_distance2.py", "README.md"], "bit-manipulation/lonely_integer": ["lonely_integer.rs", "LonelyInt.java", "LonelyInt.js", "LonelyInteger.c", "lonelyInteger.cpp", "lonelyInteger.go", "lonelyInteger.py", "README.md"], "bit-manipulation/magic_number": ["magic_number.c", "magic_number.java", "magic_number.py", "nth_magic_number.cpp", "README.md"], "bit-manipulation/maximum_xor_value": ["max_xor_value.cpp", "README.md"], "bit-manipulation/power_of_2": ["power_of_2.c", "power_of_2.cpp", "power_of_2.go", "power_of_2.jl", "power_of_2.js", "power_of_2.py", "power_of_2.rs", "PowerOf2.cs", "PowerOf2.java"], "bit-manipulation/subset_generation": ["README.md", "subset_mask_generator.cpp", "subsetgeneratorusingbit.cpp", "subsetsum.cpp"], "bit-manipulation/sum_binary_numbers": ["README.md", "sum_binary_numbers.c"], "bit-manipulation/sum_equals_xor": ["README.md", "sum_equals_xor.c", "sum_equals_xor.cpp", "sum_equals_xor.py"], "bit-manipulation/thrice_unique_number": ["README.md", "threeUnique.cpp", "thrice_unique_number.js", "ThriceUniqueNumber.java", "uniqueNumber.py"], "bit-manipulation/twice_unique_number": ["README.md", "two_Unique_Numbers.c", "twoUniqueNumbers.cpp"], "bit-manipulation/xor_swap": ["README.md", "xor_swap.c", "xor_swap.py"], "cellular_automaton/brians_brain": ["README.md"], "cellular_automaton/conways_game_of_life": ["Conway.java", "conways_game_of_life.rb", "game_of_life_C_SDL.c", "GameOfLife.hs", "life.c", "life.cpp", "life.go", "life.py", "life.rb", "README.md"], "cellular_automaton/elementary_cellular_automata": ["ElementaryCellularAutomaton.java", "README.md"], "cellular_automaton/genetic_algorithm": ["genetic.cpp", "genetic_algorithm.go", "genetic_algorithm.java", "genetic_algorithm.js", "genetic_algorithm.py", "genetic_algorithm2.py"], "cellular_automaton/langtons_ant": ["LangtonAnt.cpp", "LangtonAnt.html", "LangtonAnt.java", "LangtonAnt.py", "README.md"], "cellular_automaton/nobili_cellular_automata": ["README.md"], "cellular_automaton/von_neumann_cellular_automata": ["README.md"], "compression/lossless_compression/huffman": ["huffman.cpp", "huffman.test.cpp", "README.md"], "compression/lossless_compression/lempel-ziv-welch": ["lzw.cpp", "lzw.py", "README.md"], "compression/lossy_compression": ["README.md"], "computational_geometry/2d_line_intersection": ["line.c", "line.cpp", "line.cs", "line.java", "line.js", "line.py", "line.rb", "line2dintersection.hs", "README.md"], "computational_geometry/2d_separating_axis_test": ["sat.cpp"], "computational_geometry/area_of_polygon": ["area_of_polygon.c", "area_of_polygon.cpp", "area_of_polygon.py", "AreaOfPolygon.java"], "computational_geometry/area_of_triangle": ["area_of_triangle.cpp", "area_of_triangle.go", "area_of_triangle.js", "area_of_triangle.py", "area_of_triangle.rs", "AreaOfTriangle.java"], "computational_geometry/axis_aligned_bounding_box_collision": ["axis_aligned_bounding_box_collision.cpp", "axis_aligned_bounding_box_collision.go"], "computational_geometry/bresenham_line": ["bresenham_line.py", "bresenhams_line.cpp"], "computational_geometry/cohen_sutherland_lineclip": ["lineclip.c", "README.md"], "computational_geometry/distance_between_points": ["distance_between_points.c", "distance_between_points.cpp", "distance_between_points.go", "distance_between_points.js", "distance_between_points.py", "distance_between_points.rs", "DistanceBetweenPoints.java", "README.md"], "computational_geometry/graham_scan": ["graham_scan.cpp", "GrahamScan.java"], "computational_geometry/halfplane_intersection": ["halfplane_intersection.cpp"], "computational_geometry/jarvis_march": ["jarvis_march.cpp"], "computational_geometry/quickhull": ["quickhull.cpp", "quickhull.hs", "quickHull.java", "README.md", "test_data.csv", "test_data_soln.png", "test_data_soln.txt"], "computational_geometry/sutherland_hodgeman_clipping": ["README.md", "sutherland.c", "sutherland.cpp"], "cryptography/aes_128": ["aes_128.cpp", "AES_128.py"], "cryptography/affine_cipher": ["affine.cpp", "affine.htm", "Affine.java", "affine.py", "affine_cipher.py"], "cryptography/atbash_cipher": ["atbash_cipher.cpp", "atbash_cipher.py", "README.md"], "cryptography/autokey_cipher": ["autokey.py"], "cryptography/baconian_cipher": ["baconian.php", "baconian.py", "baconian.rb", "README.md"], "cryptography/caesar_cipher": ["caesar.c", "caesar.go", "caesar.py", "caesar.rb", "caesar_cipher.cpp", "caesar_cipher.java", "caesar_cipher.js", "caesar_cipher.php", "CaesarCipher.cs", "casesar.hs", "decryption.cpp", "encryption.cpp", "README.md"], "cryptography/columnar_transposition_cipher": ["columnar_transposition.cpp"], "cryptography/huffman_encoding": ["huffman_encoding.c"], "cryptography/morse_cipher": ["morse-code-translator.js", "morse_code_generator.bf", "morse_code_generator.c", "morse_code_generator.cpp", "morse_code_generator.rb", "morse_code_translator.cpp", "morse_code_translator.php", "morse_code_translator.py", "morse_code_translator.ts", "MorseCode.java", "morsecode.sh", "morseCode_translator.lua", "README.md"], "cryptography/polybius_cipher": ["polybius.py"], "cryptography/porta_cipher": ["porta.py"], "cryptography/rail_fence_cipher": ["rail_fence.cpp", "rail_fence.py", "rail_fence.rb"], "cryptography/rot13_cipher": ["README.md", "rot13.cpp", "rot13.js", "rot13.py", "rot13.rb", "rot13.sh", "rotN.c", "rotN.cpp", "rotN.java", "rotN.js"], "cryptography/rsa": ["rsa.c", "RSA.java", "rsa.py", "rsa_input.in"], "cryptography/rsa_digital_signature": ["rsa_digital_signature.ipynb"], "cryptography/runningkey_cipher": ["runningkey.py"], "cryptography/vigenere_cipher": ["README.md", "vigenere.go", "vigenere_cipher.c", "vigenere_cipher.hs", "vigenere_cipher.java", "vigenere_cipher.jl", "vigenere_cipher.js", "vigenere_cipher.php", "vigenere_cipher.py", "vigenere_cipher.rb", "vigenere_cypher.cpp"], "data_structures/aa_tree": ["aa_tree.cpp", "README.md"], "data_structures/avl_tree": ["avl_tree.cpp", "avl_tree.java", "avl_tree.swift"], "data_structures/b_tree/b_tree_C": ["btree.c", "btree.h", "main.c", "README.md"], "data_structures/bag": ["bag.java", "bag.js", "bag.py"], "data_structures/binomial_heap": ["binomial_heap.c", "binomial_heap.cpp", "BinomialHeap.scala"], "data_structures/bloom_filter": ["bloom_filter.c", "bloom_filter.cpp", "bloom_filter.js", "bloom_filter.py", "bloom_filter.swift", "BloomFilter.java", "BloomFilter.scala"], "data_structures/fenwick_tree": ["fenwick_tree.c", "fenwick_tree.cpp", "fenwick_tree.go", "fenwick_tree.java", "fenwick_tree.pl", "fenwick_tree.py", "fenwick_tree_inversion_count.cpp", "README.md"], "data_structures/hash_table": ["double_hashing.c", "hash_table.c", "hash_table.cpp", "hash_table.cs", "hash_table.go", "hash_table.java", "hash_table.js", "HashTable.swift", "README.md"], "data_structures/heap/max_heap": ["max_heap.c", "max_heap.cpp", "max_heap.go", "max_heap.java", "max_heap.py"], "data_structures/heap/min_heap": ["min_heap.cpp", "min_heap.java", "min_heap.py", "min_heap.rb", "min_heap.swift", "minheap.cpp", "minheap.js"], "data_structures/heap/priority_queue": ["priority_queue.py", "priorityQueue.js", "README.md"], "data_structures/interval_tree": ["interval_tree.cpp", "interval_tree.java", "README.md"], "data_structures/kd_tree": ["kd_tree.cpp", "kd_tree.java"], "data_structures/leftist_tree": ["leftist_priority_queue.cpp"], "data_structures/linked_list/circular_linked_list": ["circular_linked_list.cpp", "circular_linked_list.java", "circular_linked_list.py", "has_loop.py", "isCircular.py"], "data_structures/linked_list/doubly_linked_list": ["doubly_linked_list.c", "doubly_linked_list.cpp", "doubly_linked_list.go", "doubly_linked_list.h", "doubly_linked_list.js", "doubly_linked_list.py", "doubly_linked_list.swift", "DoublyLinkedList.java"], "data_structures/linked_list/linked_list": ["linked_list.c", "linked_list.cs", "linked_list.go", "linked_list.py", "linked_list.rb", "linked_list.swift", "single_linked_list_with_3_nodes.java", "singly_linked_list.cpp", "singly_linked_list.js", "singly_linked_list_with_classes.cpp", "SinglyLinkedList.java"], "data_structures/linked_list/linked_lists_operations/n_th_node_linked_list": ["nth_node_from_end.c", "nthNodeFromEnd.cpp"], "data_structures/pairing_heap": ["pairing_heap.fs", "pairing_heap.sml", "README.md"], "data_structures/quad_tree": ["quad_tree.swift"], "data_structures/queue/circular_buffer": ["circular_buffer.cpp", "circular_buffer.py"], "data_structures/queue/queue": ["queue.c", "queue.cpp", "queue.cs", "queue.go", "queue.java", "queue.js", "queue.py", "queue.rb", "queue.swift", "queue_vector.cpp", "README.md"], "data_structures/queue/queue_stream": ["queue_stream.cs"], "data_structures/queue/queue_using_linked_list": ["queue_using_linked_list.c", "queue_using_linked_list.cpp", "queue_using_linked_list.java", "queue_using_linked_list.py", "queue_using_linked_list.rb", "README.md"], "data_structures/queue/queue_using_stack": ["queue_using_stack.cpp", "queue_using_stack.java", "queue_using_stack.sh"], "data_structures/queue/reverse_queue": ["reverse_queue.cpp", "reverse_queue.go", "reverse_queue.java", "reverse_queue.py", "reverse_queue.swift"], "data_structures/red_black_tree": ["RBTree.scala", "red_black_test.c", "red_black_tree.c", "red_black_tree.cpp", "red_black_tree.h", "red_black_tree.java", "red_black_tree.rb", "red_black_tree.test.cpp"], "data_structures/rope": ["rope.py"], "data_structures/segment_tree": ["lazy_segment_tree.java", "persistent_segment_tree_sum.cpp", "README.md", "segment_tree.java", "segment_tree_kth_statistics_on_segment.cpp", "segment_tree_lazy_propagation.cpp", "segment_tree_rmq.cpp", "segment_tree_rmq.go", "segment_tree_rmq.py", "segment_tree_sum.cpp", "segment_tree_sum.go", "segment_tree_sum.py", "segment_tree_sum.rb", "SegmentTree.scala"], "data_structures/skip_list": ["skip_list.c", "skip_list.cpp", "skip_list.java", "skip_list.scala", "skip_list.swift"], "data_structures/soft_heap": ["soft_heap.cpp"], "data_structures/splay_tree": ["readme.md", "splay_tree.cpp", "splay_tree.go", "splay_tree.java", "splay_tree.kt", "splay_tree.scala"], "data_structures/stack/abstract_stack/cpp/arrayStack": ["ArrayStack.h", "arraystackTester.cpp"], "data_structures/stack/balanced_expression": ["balanced_expression.java"], "data_structures/stack/infix_to_postfix": ["infix_to_postfix.c", "infix_to_postfix.cpp", "infix_to_postfix.java", "infix_to_postfix.py", "README.md"], "data_structures/stack/postfix_evaluation": ["infix_to_postfix_evaluation.cpp", "postfix_evaluation.c", "postfix_evaluation.sh", "README.md"], "data_structures/stack/prefix_to_postfix": ["prefix_to_postfix.py", "README.md"], "data_structures/stack/reverse_stack": ["README.md", "reverse_stack.c", "reverse_stack.cs", "reverse_stack.go", "reverse_stack.java", "reverse_stack.py", "reverse_stack.swift", "reverse_stack_without_extra_space.cpp"], "data_structures/stack/sort_stack": ["README.md", "sort_stack.c", "sort_stack.cpp"], "data_structures/stack/stack": ["README.md", "stack.c", "stack.cpp", "stack.cs", "stack.erl", "stack.ex", "stack.go", "stack.java", "stack.js", "stack.php", "stack.py", "stack.rb", "stack.rs", "stack.swift"], "data_structures/suffix_array": ["suffix_array.cpp"], "data_structures/treap": ["persistent_treap.kt", "treap.cpp", "treap.java", "treap.scala", "treap.swift"], "data_structures/tree/binary_search_tree": ["binary_search_tree.c", "binary_search_tree.cpp", "binary_search_tree.go", "binary_search_tree.java", "binary_search_tree.js", "binary_search_tree.py", "binary_search_tree.rb", "binary_search_tree.swift", "README.md"], "data_structures/tree/binary_tree/bottom_view_binary_tree": ["bottom_view_binary_tree.cpp", "bottom_view_binary_tree.java"], "data_structures/tree/binary_tree_diameter": ["b_tree_diameter.cpp", "binary_tree_diameter.c", "binary_tree_diameter.cpp", "binary_tree_diameter.hs", "binary_tree_diameter.java", "binary_tree_diameter.py", "diameter_tree.c", "README.md"], "data_structures/tree/binary_tree_maximum_height": ["binary_tree_maximum_height.java", "binary_tree_maximum_height.py", "binary_tree_maximum_height_1.cpp", "binary_tree_maximum_height_2.cpp", "README.md"], "data_structures/tree/binary_tree_minimum_height": ["binary_tree_minimum_height.c", "binary_tree_minimum_height.cpp", "binary_tree_minimum_height.java", "binary_tree_minimum_height.py", "README.md"], "data_structures/tree/binary_tree_mirror": ["binary_tree_mirror.cpp", "binary_tree_mirror.py", "mirror_image.c", "README.md"], "data_structures/tree/binary_tree_to_doubly_linked_list": ["binary_tree_to_DLL.cpp"], "data_structures/tree/check_balanced_binary_tree": ["check_balanced_binary_tree.java", "is_binary_search_tree.cpp", "README.md"], "data_structures/tree/inorder_and_preorder_to_postorder": ["inorder_and_preorder_to_postorder.c", "inorder_and_preorder_to_postorder.cpp", "README.md"], "data_structures/tree/left_view_binary_tree": ["left_view_binary_tree.java"], "data_structures/tree/make_tree_from_inorder_and_preorder": ["make_tree_from_inorder_and_preorder.java", "README.md"], "data_structures/tree/path_sum": ["path_sum.cpp", "path_sum.hpp", "path_sum_for_sum_of_part_paths_test.cpp", "path_sum_for_sum_of_whole_paths_test.cpp", "path_sum_for_whole_paths_test.cpp"], "data_structures/tree/right_threaded_binary_tree": ["right_threaded_binary_tree.cpp"], "data_structures/tree/right_view_binary_tree": ["README.md", "right_view.cpp", "right_view_binary_tree.cpp", "right_view_binary_tree.py"], "data_structures/tree/sum_left_leaves": ["README.md", "sum_left_leaves.c"], "data_structures/tree/tree_comparer": ["test_tree_comparer.cpp", "tree_comparer.cpp"], "data_structures/tree/tree_node": ["tree_node.cpp"], "data_structures/trie": ["trie.c", "trie.cpp", "trie.cs", "trie.java", "trie.py", "trie.rb", "trie.scala", "trie.swift"], "data_structures/two_three_tree": ["TwoThreeTree.scala"], "data_structures/union_find": ["README.md", "union_find.c", "union_find.cpp", "union_find.go", "union_find.java", "union_find.js", "union_find.py", "union_find.scala"], "data_structures/van_emde_boas_tree": ["van_emde_boas.cpp"], "design_pattern/observer_pattern": ["observer_pattern.cpp", "observer_pattern.rs"], "design_pattern/singleton_pattern": ["SingletonPattern.cpp", "SingletonPattern.java"], "divide_conquer/closest_pair_of_points": ["closest_pair.cpp", "closest_pair.py"], "divide_conquer/inversion_count": ["count_inversions.c", "inversion_count.cpp", "inversion_count.java", "inversion_count.js", "inversion_count.py", "README.md"], "divide_conquer/karatsuba_multiplication": ["multiply.java"], "divide_conquer/merge_sort_using_divide_and_conquer": ["inversions.c", "merge_sort_usingDandC.cpp", "MergeSort.java", "README.md"], "divide_conquer/quick_sort": ["quick_sort.c", "quick_sort.cpp", "quick_sort.hs", "quick_sort.py", "quick_sort.rs", "quick_sort.swift", "quick_sort2.cpp", "quick_sort_java", "README.md"], "divide_conquer/warnock_algorithm": ["warnock_algorithm.pde"], "dynamic_programming/Array_Median": ["Median.java", "median.php", "median.py", "median.rb", "median.rs"], "dynamic_programming/binomial_coefficient": ["binomial_coefficient.c", "binomial_coefficient.cpp", "binomial_coefficient.java", "binomial_coefficient.py", "README.md"], "dynamic_programming/boolean_parenthesization": ["boolean_parenthesization.c", "boolean_parenthesization.cpp", "boolean_parenthesization.java", "boolean_parenthesization.py", "boolean_parenthesization.swift", "README.md"], "dynamic_programming/box_stacking": ["box_stacking.cpp", "box_stacking.py", "BoxStacking.java", "README.md"], "dynamic_programming/coin_change": ["coin_change.java", "coin_change.py", "coinchange.c", "coinchange.cpp", "coinchange.go", "mincoinchange.cpp", "README.md"], "dynamic_programming/edit_distance": ["edit_distance.c", "edit_distance.cpp", "edit_distance.go", "edit_distance.hs", "edit_distance.java", "edit_distance.py", "edit_distance_backtracking.cpp", "edit_distance_hirschberg.cpp", "README.md"], "dynamic_programming/egg_dropping_puzzle": ["egg_dropping.py", "egg_dropping_puzzle.cpp", "eggDropping.hs", "README.md"], "dynamic_programming/factorial": ["factorial.go", "factorial.java", "factorial.py", "factorial.scala"], "dynamic_programming/knapsack": ["knapsack.c", "knapsack.cpp", "knapsack.go", "Knapsack.java", "knapsack.js", "knapsack.py", "README.md"], "dynamic_programming/largest_sum_contiguous_subarray": ["largest_sum_contiguous_subarray.cpp", "largest_sum_contiguous_subarray.go", "largest_sum_contiguous_subarray.hs", "largest_sum_contiguous_subarray.java", "largest_sum_contiguous_subarray.py", "README.md"], "dynamic_programming/longest_bitonic_sequence": ["longest_bitonic_sequence.c", "longest_bitonic_sequence.js", "longest_bitonic_sequence.py", "longestBitonicSeq.cpp", "longestBitonicSequence.java", "README.md"], "dynamic_programming/longest_common_increasing_subsequence": ["longest_common_increasing_subsequence.cpp"], "dynamic_programming/longest_common_subsequence": ["longest_common_subsequence.cpp", "Longest_Common_Subsequence.py", "longestCommonSubsequence.go", "LongestCommonSubsequence.java", "LongestCommonSubsequenceRec.java", "README.md"], "dynamic_programming/longest_common_substring": ["longest_common_substring.cpp"], "dynamic_programming/longest_increasing_subsequence": ["longest_increasing_subsequence.c", "longest_increasing_subsequence.cpp", "longest_increasing_subsequence.go", "longest_increasing_subsequence.java", "longest_increasing_subsequence.js", "longest_increasing_subsequence.py", "longest_increasing_subsequence_using_segment_tree.cpp", "README.md"], "dynamic_programming/longest_independent_set": ["README.md"], "dynamic_programming/longest_palindromic_sequence": ["longest_palindromic_sequence.c", "longest_palindromic_sequence.cpp", "longest_palindromic_sequence.js", "longest_palindromic_sequence.py", "README.md"], "dynamic_programming/longest_palindromic_substring": ["LongestPalindromicSubstring.cpp", "README.md"], "dynamic_programming/matrix_chain_multiplication": ["matrix_chain_multiplication.c", "matrix_chain_multiplication.cpp", "matrix_chain_multiplication.py", "MatrixChainMultiplication.java", "README.md"], "dynamic_programming/maximum_sum_increasing_subsequence": ["maximum_sum_increasing_subsequence.c", "README.md"], "dynamic_programming/maximum_sum_sub_matrix": ["MaximumSubMatrixSum.java", "MaxSumSubMatrix.cpp"], "dynamic_programming/min_cost_path": ["min_cost_path.cpp", "min_cost_path.java", "min_cost_path.py", "README.md"], "dynamic_programming/minimum_cost_polygon_triangulation": ["README.md"], "dynamic_programming/minimum_insertion_palindrome": ["minimum_insertions_palindrome_using_lcs.cpp"], "dynamic_programming/minimum_insertions_palindrome": ["minimum_insertions_palindrome.cpp"], "dynamic_programming/no_consec_ones": ["no_consec_1.cpp", "no_consec_ones.py", "README.md"], "dynamic_programming/palindrome_partition": ["palindrome_partition.cpp", "palindrome_partition.js", "README.md"], "dynamic_programming/rod_cutting": ["README.md", "rod_cutting.cpp", "rod_cutting.hs", "rod_cutting.py"], "dynamic_programming/shortest_common_supersequence": ["README.md", "SCS.java", "shortest_common_supersequence.cpp", "shortest_common_supersequence.py"], "dynamic_programming/subset_sum": ["README.md", "subset_sum.cpp", "subset_sum.go", "subset_sum.java", "subset_sum.py"], "dynamic_programming/tiling_problem": ["README.md", "tiling.cpp", "tiling.py"], "dynamic_programming/weighted_job_scheduling": ["README.md", "weighted_job_scheduling.cpp"], "graph-algorithms/adjacency_lists_graph_representation/adjacency_lists_in_C": ["lgraph_struct.c", "lgraph_struct.h", "main.c", "README.MD"], "graph-algorithms/astar_algorithm": ["astar.js"], "graph-algorithms/bellman_ford_algorithm": ["bellman_ford.c", "bellman_ford.cpp", "bellman_ford.php", "bellman_ford.py", "BellmanFordAdjacencyList.java", "BellmanFordEdgeList.java", "README.md"], "graph-algorithms/biconnected_components": ["biconnected_components.cpp", "biconnected_components.java", "README.md"], "graph-algorithms/Bipartite_check": ["Bipartite_check.java"], "graph-algorithms/bipartite_checking": ["bipartite.cpp", "bipartite_checking.cpp", "BipartiteBfs.java", "bipartitecheckingusing_bfs.cpp", "BipartiteGraphCheckAdjacencyList.java", "README.md"], "graph-algorithms/boruvka_minimum_spanning_tree": ["boruvka_minimum_spanning_tree.cpp", "README.md"], "graph-algorithms/breadth_first_search": ["bfs.c", "bfs.cpp", "Bfs.java", "bfs.rb", "breadth_first_search.py", "breadth_first_search.swift", "README.md"], "graph-algorithms/bridge_tree": ["bridge_tree.cpp"], "graph-algorithms/bridges_in_graph": ["bridges.cpp", "README.md"], "graph-algorithms/bron_kerbosch_algorithm": ["bron_kerbosch.java"], "graph-algorithms/centroid_decomposition": ["centroid_decomposition.java"], "graph-algorithms/channel_assignment": ["README.md"], "graph-algorithms/connected_components": ["connected_components.c"], "graph-algorithms/count_of_ways_n": ["Count_of_ways_n.cpp"], "graph-algorithms/cut_vertices": ["cut_vertices.cpp", "README.md"], "graph-algorithms/cycle_directed_graph": ["cycle_directed_detection.c", "cycle_directed_graph.cpp", "cycle_directed_graph.py", "README.md"], "graph-algorithms/cycle_undirected_graph": ["CheckCycle.java", "cycle_undirected_graph.py", "cycle_using_union_find_datastructure.cpp", "cycleGraph.cpp", "README.md"], "graph-algorithms/depth_first_search": ["depth_first_search.py", "dfs.c", "dfs.cpp", "dfs.go", "Dfs.java", "Dfs.kt", "dfs.rb", "README.md"], "graph-algorithms/dijkstra_shortest_path": ["dijkstra.cpp", "Dijkstra.py", "Dijkstra_Algorithm.c", "dijkstra_efficient.py", "dijkstra_gnu_fast.cpp", "README.md"], "graph-algorithms/dinic_maximum_flow": ["dinic_maximum_flow.cpp"], "graph-algorithms/eulerian_path": ["eulerian.java", "eulerian.py", "README.md"], "graph-algorithms/fleury_algorithm_euler_path": ["README.md"], "graph-algorithms/floyd_warshall_algorithm": ["floyd_warshall.cpp", "floyd_warshall.py", "floydWarshall.c", "FloydWarshall.java", "README.md"], "graph-algorithms/ford_fulkerson_maximum_flow": ["ford_fulkerson.cpp", "ford_fulkerson_using_bfs.cpp", "ford_fulkerson_using_bfs.py", "FordFulkersonUsingBfs.java", "README.md"], "graph-algorithms/graph_coloring": ["graph_color_greedy.py", "graph_coloring.cpp", "graph_coloring.java", "README.md"], "graph-algorithms/hamiltonian_cycle": ["hamiltonian_cycle.py", "README.md"], "graph-algorithms/hamiltonian_path": ["hamiltonian_path.cpp"], "graph-algorithms/hopcroft_karp_algorithm": ["README.md"], "graph-algorithms/johnson_algorithm_shortest_path": ["johnsons_algo.py", "README.md"], "graph-algorithms/karger_minimum_cut": ["karger.java", "README.md"], "graph-algorithms/kruskal_minimum_spanning_tree": ["kruskal_minimum_spanning_tree.cpp", "kruskal_minimum_spanning_tree.py", "kruskal_mst.c", "Kruskals.java", "README.md"], "graph-algorithms/kuhn_maximum_matching": ["kuhn_maximum_matching.cpp"], "graph-algorithms/left_view_binary_tree": ["left_view_binary.py", "left_view_binary_tree.cpp"], "graph-algorithms/longest_path_directed_acyclic_graph": ["longest_path_directed_acyclic_graph.cpp", "README.md"], "graph-algorithms/maximum_bipartite_matching": ["max_bipartite_matching.py", "README.md"], "graph-algorithms/maximum_edge_disjoint_paths": ["README.md"], "graph-algorithms/minimum_s_t_cut": ["README.md"], "graph-algorithms/postorder_from_inorder_and_preorder": ["inprepost.cpp"], "graph-algorithms/prim_minimum_spanning_tree": ["prim_minimum_spanning_tree.cpp", "prim_minimum_spanning_tree.py", "Prims.c", "README.md"], "graph-algorithms/shortest_path_k_edges": ["README.md"], "graph-algorithms/steiner_tree": ["steiner_tree.java"], "graph-algorithms/strongly_connected_components": ["README.md", "strongly_connected_components.cpp", "strongly_connected_components.py"], "graph-algorithms/tarjan_algorithm_strongly_connected_components": ["README.md"], "graph-algorithms/topological_sort": ["kahn_algo_unique_toposort.cpp", "README.md", "topological.hs", "topological_sort.c", "TopologicalSortAdjacencyList.java", "TopologicalSortAdjacencyMatrix.java", "toposort.cpp", "toposort.py"], "graph-algorithms/transitive_closure_graph": ["README.md", "transitive_closure.cpp", "transitive_closure_graph.py", "transitive_closure_graph_floyd_warshall.cpp"], "graph-algorithms/travelling_salesman_mst": ["README.md", "Travelling_salesman.cpp", "travelling_salesman.py"], "graph-algorithms/vertex_cover": ["README.md"], "greedy-algorithms/activity_selection": ["activity_selection.cpp", "activity_selection.java", "activity_selection.py", "README.md"], "greedy-algorithms/dijkstra_shortest_path": ["dijkstra-shortest-path.cpp", "dijkstra_shortest_path.c", "dijkstra_shortest_path.java", "dijkstra_shortest_path.py", "README.md"], "greedy-algorithms/egyptian_fraction": ["egyptian_fraction.cpp", "egyptian_fraction.py"], "greedy-algorithms/fractional_knapsack": ["fractional_knapsack.c", "fractional_knapsack.cpp", "fractional_knapsack.cs", "fractional_knapsack.go", "fractional_knapsack.java", "fractional_knapsack.py", "README.md"], "greedy-algorithms/hillclimber": ["Hillclimber.java"], "greedy-algorithms/huffman_coding": ["huffman_codiing.py", "huffman_coding.cpp", "README.md"], "greedy-algorithms/job_sequencing": ["job_sequencing.cpp", "job_sequencing.py", "README.md"], "greedy-algorithms/k_centers": ["k_centers.py", "README.md"], "greedy-algorithms/kruskal_minimum_spanning_tree": ["kruskal.c", "kruskal.py", "README.md"], "greedy-algorithms/minimum_coins": ["minimum-coins.js", "minimum_coins.cpp", "minimum_coins.go", "minimum_coins.py", "MinimumCoins.hs", "MinimumCoins.java", "README.md"], "greedy-algorithms/prim_minimum_spanning_tree": ["prim_mst.cpp", "prim_mst_haskell.hs", "prims_mst.py", "README.md"], "greedy-algorithms/warshall": ["warshalls.c"], "mathematical-algorithms/2sum": ["2sum.c", "2sum.cpp", "2sum.go", "2sum.java", "2sum.js", "2sum.py", "2sum.rb", "2sum.rs"], "mathematical-algorithms/add_polynomials": ["add_polynomials.c", "add_polynomials.cpp", "add_polynomials.go", "README.md"], "mathematical-algorithms/amicable_numbers": ["amicable numbers.py", "amicable_numbers.cpp", "amicable_numbers.cs", "amicable_numbers.go", "amicable_numbers.java", "amicable_numbers.js", "amicable_numbers.py", "amicable_numbers.rb", "amicable_numbers.rs"], "mathematical-algorithms/armstrong_numbers": ["armstrong_numbers.c", "armstrong_numbers.cpp", "armstrong_numbers.cs", "armstrong_numbers.go", "armstrong_numbers.java", "armstrong_numbers.js", "armstrong_numbers.py", "armstrong_numbers.rb", "README.md"], "mathematical-algorithms/automorphic_numbers": ["automorphic_numbers.c", "automorphic_numbers.cpp", "automorphic_numbers.cs", "automorphic_numbers.go", "automorphic_numbers.hs", "automorphic_numbers.java", "automorphic_numbers.js", "automorphic_numbers.php", "automorphic_numbers.py", "automorphic_numbers.rb", "automorphic_numbers.swift", "README.md"], "mathematical-algorithms/average_stream_numbers": ["average_stream_numbers.cpp", "average_stream_numbers.go", "average_stream_numbers.py", "README.md"], "mathematical-algorithms/babylonian_method": ["babylonian_method.c", "babylonian_method.cpp", "babylonian_method.go", "babylonian_method.java", "babylonian_method.js", "Babylonian_method.py", "README.md"], "mathematical-algorithms/binomial_coefficient": ["binomial_coefficient.cpp", "binomial_coefficient.go", "binomial_coefficient.java", "binomial_coefficient.py", "README.md"], "mathematical-algorithms/catalan_number": ["catalan_number.c", "catalan_number.java", "catalan_number.js", "catalan_number.py", "catalan_number.rb", "catalan_number.scala", "catalan_number_dynamic.cpp", "catalan_number_recursive.cpp", "catlan_number.py", "README.md"], "mathematical-algorithms/check_is_square": ["check_is_square.cpp", "check_is_square.cs", "check_is_square.go", "check_is_square.java", "check_is_square.js", "check_is_square.php", "check_is_square.py", "check_is_square.rs", "check_is_square.ruby", "check_is_square.scala", "check_is_square.swift"], "mathematical-algorithms/convolution": ["convolution.cpp"], "mathematical-algorithms/coprime_numbers": ["coprime_numbers.c", "coprime_numbers.cpp", "coprime_numbers.cs", "coprime_numbers.go", "coprime_numbers.js", "coprime_numbers.py", "coprime_numbers.rs"], "mathematical-algorithms/count_digits": ["count_digits.c", "count_digits.cpp", "count_digits.cs", "count_digits.go", "count_digits.hs", "count_digits.java", "count_digits.js", "count_digits.py", "count_digits.swift"], "mathematical-algorithms/count_trailing_zeroes": ["count_trailing_zeroes.c", "count_trailing_zeroes.scala", "count_trailing_zeroes_factorial.java", "count_trailing_zeros_factorial.cpp", "count_trailing_zeros_factorial.js", "count_trailing_zeros_factorial.py"], "mathematical-algorithms/decoding_of_string": ["README.md"], "mathematical-algorithms/delannoy_number": ["delannoy_number.cpp", "README.md"], "mathematical-algorithms/dfa_division": ["README.md"], "mathematical-algorithms/diophantine": ["diophantine.cpp"], "mathematical-algorithms/divided_differences": ["divided_differences.java", "README.md"], "mathematical-algorithms/euler_totient": ["euler_totient.c", "euler_totient.cpp", "euler_totient.java", "euler_totient.py", "euler_totient_sieve.cpp", "euler_totient_sieve.py", "README.md"], "mathematical-algorithms/exponentiation_power/exponentiation_by_squaring": ["exponentiation_by_squaring.cpp", "exponentiation_by_squaring.go", "exponentiation_by_squaring.py"], "mathematical-algorithms/factorial": ["factorial-hrw.py", "factorial.c", "factorial.clj", "factorial.erl", "factorial.ex", "factorial.go", "factorial.hs", "factorial.java", "factorial.php", "factorial.rb", "factorial.rs", "factorial.scala", "factorial.swift", "factorial_iteration.c", "factorial_iteration.cs", "factorial_iteration.js", "factorial_iteration.py", "factorial_recursion.c", "factorial_recursion.cpp", "factorial_recursion.cs", "factorial_recursion.js", "factorial_recursion.py"], "mathematical-algorithms/fast_fourier_transform": ["fast_fourier_transform.java"], "mathematical-algorithms/fast_inverse_sqrt": ["fast_inverse_sqrt.cpp"], "mathematical-algorithms/fermats_little_theorem": ["fermats_little_theorem.cpp", "fermats_little_theorem.py"], "mathematical-algorithms/fibonacci_number": ["fast_fibonacci.c", "fibonacci_for_big_numbers.cpp", "fibonacci_lucas.py", "fibonacci_matrix_exponentiation.cpp", "fibonacci_matrix_multiplication.py", "fibonacci_memorized.swift", "fibonacci_number.c", "fibonacci_number.clj", "fibonacci_number.cpp", "fibonacci_number.cs", "fibonacci_number.erl", "fibonacci_number.ex", "fibonacci_number.go", "fibonacci_number.hs", "fibonacci_number.java", "fibonacci_number.js", "fibonacci_number.php", "fibonacci_number.py", "fibonacci_number.rb", "fibonacci_number.rs", "fibonacci_number.scala", "fibonacci_number.swift", "README.md"], "mathematical-algorithms/fractals": ["julia_miim.cpp", "simple_julia.cpp"], "mathematical-algorithms/gaussian_elimination": ["gaussian_elimination.cpp", "gaussian_elimination.java"], "mathematical-algorithms/gcd_and_lcm": ["gcd_and_lcm.c", "gcd_and_lcm.cpp", "gcd_and_lcm.cs", "gcd_and_lcm.erl", "gcd_and_lcm.ex", "gcd_and_lcm.go", "gcd_and_lcm.java", "gcd_and_lcm.js", "gcd_and_lcm.php", "gcd_and_lcm.py", "gcd_and_lcm.scala"], "mathematical-algorithms/greatest_digit_in_number": ["greatest_digit_in_number.c", "greatest_digit_in_number.cpp", "greatest_digit_in_number.cs", "greatest_digit_in_number.hs", "greatest_digit_in_number.java", "greatest_digit_in_number.js", "greatest_digit_in_number.php", "greatest_digit_in_number.py", "greatest_digit_in_number.rb"], "mathematical-algorithms/hill_climbing": ["hill_climbing.java"], "mathematical-algorithms/horner_polynomial_evaluation": ["horner_polynomial_evaluation.cpp", "horner_polynomial_evaluation.java", "README.md"], "mathematical-algorithms/integer_conversion": ["decimal_to_any_base.js", "decimal_to_any_base.py", "decimal_to_bin.cpp", "decimal_to_hex.cpp", "decimal_to_int.go", "decimal_to_oct.cpp"], "mathematical-algorithms/integer_to_roman": ["integer_to_roman.cpp", "integer_to_roman.js", "integer_to_roman.py"], "mathematical-algorithms/karatsuba_multiplication": ["karatsuba_multiplication.java"], "mathematical-algorithms/largrange_polynomial": ["lagrange_polynomial.java", "README.md"], "mathematical-algorithms/lexicographic_string_rank": ["lexicographic_string_rank.c", "lexicographic_string_rank.cpp", "lexicographic_string_rank.java", "lexicographic_string_rank.py", "README.md"], "mathematical-algorithms/log_of_factorial": ["log_of_factorial.c", "log_of_factorial.cpp", "log_of_factorial.py"], "mathematical-algorithms/lucas_theorem": ["lucas_theorem.cpp"], "mathematical-algorithms/lucky_number": ["lucky_number.c", "lucky_number.java", "README.md"], "mathematical-algorithms/magic_square": ["magic_square.py", "README.md"], "mathematical-algorithms/modular_inverse": ["modular_inverse.cpp", "modular_inverse.java", "modular_inverse.py", "modular_inverse.rb"], "mathematical-algorithms/multiply_polynomial": ["multiply_polynomial.cpp", "README.md"], "mathematical-algorithms/newton_polynomial": ["newton_polynomial.java", "README.md"], "mathematical-algorithms/newton_raphson_method": ["newton_raphson.c", "newton_raphson.cpp", "newton_raphson.php", "README.md"], "mathematical-algorithms/next_larger_number": ["next_larger_number.cpp", "next_larger_number.java", "next_larger_number.php", "next_larger_number.py"], "mathematical-algorithms/pandigital_number": ["pandigital_number.c", "pandigital_number.rb", "README.md"], "mathematical-algorithms/pascal_triangle": ["pascal_triangle.cpp", "pascal_triangle.exs", "pascal_triangle.go", "pascal_triangle.java", "pascal_triangle.py", "README.md"], "mathematical-algorithms/perfect_number": [".gitignore", "perfect_number.c", "perfect_number.cpp", "perfect_number.hs", "perfect_number.java", "perfect_number.js", "perfect_number.php", "perfect_number.py", "perfect_number.rb", "perfect_number.rs", "perfect_number_list.cpp", "README.md"], "mathematical-algorithms/permutation_lexicographic_order": ["permutation_lexicographic_order.cpp", "README.md"], "mathematical-algorithms/poisson_sample": ["poisson_sample.py"], "mathematical-algorithms/primality_tests/fermat_primality_test": ["fermat_primality_test.c"], "mathematical-algorithms/primality_tests/miller_rabin_primality_test": ["miller_rabin_primality_test.cpp", "miller_rabin_primality_test.py"], "mathematical-algorithms/primality_tests/solovay-strassen_primality_test": ["solovay-strassen_primality_test.cpp"], "mathematical-algorithms/prime_factors": ["prime_factors.cpp", "prime_factors.go", "prime_factors.java", "prime_factors.py", "sum_of_primes.cpp"], "mathematical-algorithms/prime_numbers_of_n": ["prime_numbers_of_n.cpp", "prime_numbers_of_n.py", "README.md"], "mathematical-algorithms/pythagorean_triplet": ["pythagorean_triplet.cpp"], "mathematical-algorithms/replace_0_with_5": ["0_to_5_efficent.cpp", "replace_0_with_5.c", "replace_0_with_5.cpp", "replace_0_with_5.go", "replace_0_with_5.java", "replace_0_with_5.js", "replace_0_with_5.py"], "mathematical-algorithms/reverse_factorial": ["README.md", "reverse_factorial.go", "reverse_factorial.java", "reverse_factorial.js", "reverse_factorial.py", "reverse_factorial.rb"], "mathematical-algorithms/reverse_number": ["reverse_number.cpp", "reverse_number.cs", "reverse_number.go", "reverse_number.hs", "reverse_number.java", "reverse_number.js", "reverse_number.php", "reverse_number.py", "reverse_number.rb", "reverse_number.swift", "reverse_number_recursion.java"], "mathematical-algorithms/russian_peasant_multiplication": ["README.md", "russian_peasant_multiplication.cpp", "russian_peasant_multiplication.cs", "russian_peasant_multiplication.go", "russian_peasant_multiplication.js", "russian_peasant_multiplication.php", "russian_peasant_multiplication.py", "russian_peasant_multiplication.rs"], "mathematical-algorithms/segmented_sieve_of_eratosthenes": ["segmented_sieve_of_eratosthenes.cpp"], "mathematical-algorithms/shuffle_array": ["README.md", "shuffle_array.cpp", "shuffle_array.js", "shuffle_array.rb"], "mathematical-algorithms/sieve_of_atkin": ["sieve_of_atkin.c", "sieve_of_atkin.cpp", "sieve_of_atkin.java", "sieve_of_atkin.py"], "mathematical-algorithms/sieve_of_eratosthenes": ["README.md", "sieve_of_erathosthenes_compact.cpp", "sieve_of_eratosthenes.c", "sieve_of_eratosthenes.cpp", "sieve_of_eratosthenes.cs", "sieve_of_eratosthenes.go", "sieve_of_eratosthenes.hs", "sieve_of_eratosthenes.java", "sieve_of_eratosthenes.js", "sieve_of_eratosthenes.php", "sieve_of_eratosthenes.py", "sieve_of_eratosthenes_linear.cpp"], "mathematical-algorithms/simpsons_rule": ["simpsons_rule.py"], "mathematical-algorithms/smallest_digit_in_number": ["smallest_digit_in_number.c", "smallest_digit_in_number.cpp", "Smallest_digit_in_number.hs", "smallest_digit_in_number.java", "smallest_digit_in_number.js", "smallest_digit_in_number.php", "smallest_digit_in_number.py", "smallest_digit_in_number.rb"], "mathematical-algorithms/std": ["std.c", "std.cpp", "std.go", "std.js", "std.py"], "mathematical-algorithms/steepest_descent": ["steepest_descent.cpp"], "mathematical-algorithms/sum_of_digits": ["sum_of_digits.c", "sum_of_digits.cpp", "sum_of_digits.cs", "sum_of_digits.ex", "sum_of_digits.go", "sum_of_digits.java", "sum_of_digits.js", "sum_of_digits.php", "sum_of_digits.py", "sum_of_digits.rb", "sum_of_digits.rs", "sum_of_digits.swift", "sum_of_digits_with_recursion.c"], "mathematical-algorithms/taxicab_numbers": ["taxicab_numbers.py"], "mathematical-algorithms/tower_of_hanoi": ["README.md", "tower_of_hanoi.c", "tower_of_hanoi.cpp", "tower_of_hanoi.go", "tower_of_hanoi.hs", "tower_of_hanoi.java", "tower_of_hanoi.js", "tower_of_hanoi.ml", "tower_of_hanoi.py", "tower_of_hanoi.rs", "tower_of_hanoi.scala", "tower_of_hanoi_binary_solution.c"], "mathematical-algorithms/tribonacci_numbers": ["tribonacci_numbers.cpp", "tribonacci_numbers.go", "tribonacci_numbers.java", "tribonacci_numbers.py", "tribonacci_numbers.rs", "Tribonnaci.java"], "networking/determine_endianess": ["determine_endianess.c"], "networking/validate_IP": ["ipv4_check.go", "is_valid_ip.php", "README.md", "Validate_connection_ipv4.py", "validate_ip.c", "validate_ip.rb", "validate_ip.sh", "validate_ipv4.js", "validate_ipv4.py"], "operating_system/bankers_algorithm": ["banker_safety.cpp"], "operating_system/dining_philosophers": ["dining_philosophers.c", "README.md"], "operating_system/first_come_first_serve": ["fcfs.cpp", "fcfs.cs", "FCFS.java", "fcfs.py", "fcfs.rs"], "operating_system/least_recently_used": ["lru.c"], "operating_system/multi_level_feedback_queue_scheduling": ["mlfq.ts"], "operating_system/peterson_algorithm_for_mutual_exclusion": ["mythreads.h", "peterson_algo_mutual_exclusion_in_c.c"], "operating_system/producer_consumer": ["producer_consumer.cpp"], "operating_system/readers_writes": ["readers_writes.cpp"], "operating_system/round_robin_scheduling": ["round_robin_scheduling.cpp", "round_robin_scheduling.java"], "operating_system/shortest_seek_time_first": ["shortest_seek_time_first.c", "shortest_seek_time_first.cpp"], "operating_system/smallest_remaining_time_first": ["srtf.c"], "randomized-algorithms/karger_minimum_cut_algorithm": ["karger_minimum_cut_algorithm.cpp", "README.md"], "randomized-algorithms/kth_smallest_element_algorithm": ["kth_smallest_element_algorithm.cpp", "README.md"], "randomized-algorithms/random_from_stream": ["Random_number_selection_from_a_stream.cpp"], "randomized-algorithms/random_node_linkedlist": ["README.md"], "randomized-algorithms/randomized_quick_sort": ["randomized_quicksort.c"], "randomized-algorithms/reservoir_sampling": ["README.md", "reservoir_sampling.cpp", "reservoir_sampling.rs"], "randomized-algorithms/shuffle_an_array": ["README.md", "shuffle_an_array.cpp", "Shuffle_An_Array.java", "shuffle_an_array.php", "shuffle_an_array.py", "shuffle_an_array.rb", "shuffle_an_array.rs", "shuffle_library.rb", "shuffleArray.js"], "search/binary_search": ["binary_search.c", "binary_search.cpp", "binary_search.cs", "binary_search.go", "binary_search.hs", "binary_search.java", "binary_search.js", "binary_search.kt", "binary_search.php", "binary_search.py", "binary_search.rb", "binary_search.rkt", "binary_search.rs", "binary_search.scala", "binary_search.sh", "binary_search.swift", "README.md"], "search/exponential_search": ["exponential_search.cpp", "exponential_search.go", "exponential_search.java", "exponential_search.js", "exponential_search.php", "exponential_search.rb", "exponential_search.rs", "exponential_search2.cpp", "exponential_search2.py", "README.md"], "search/fuzzy_search": ["fuzzy_search.js", "fuzzy_search.php"], "search/interpolation_search": ["interpolation_search.c", "Interpolation_search.cpp", "interpolation_search.go", "interpolation_search.java", "interpolation_search.php", "interpolation_search.py", "README.md"], "search/jump_search": ["jump_search.c", "jump_search.cpp", "jump_search.go", "jump_search.java", "jump_search.js", "jump_search.php", "jump_search.py", "jump_search.rs", "jump_search.swift", "README.md"], "search/linear_search": ["linear_search.c", "linear_search.clj", "linear_search.cpp", "linear_search.cs", "linear_search.go", "linear_search.hs", "linear_search.java", "linear_search.js", "linear_search.kt", "linear_search.ml", "linear_search.nim", "linear_search.php", "linear_search.py", "linear_search.rb", "linear_search.rs", "linear_search.scala", "linear_search.swift", "README.md", "SentinelLinearSearch.cpp"], "search/ternary_search": ["README.md", "ternary_search.c", "ternary_search.cpp", "ternary_search.go", "Ternary_search.java", "ternary_search.js", "ternary_search.kt", "ternary_search.php", "ternary_search.py", "ternary_search.rs"], "selection-algorithms/median-of-medians": ["median_of_medians.c", "median_of_medians.hs", "median_of_medians.py"], "sorting/bead_sort": ["bead_sort.c", "bead_sort.cpp", "bead_sort.cs", "bead_sort.java", "bead_sort.js", "bead_sort.m", "bead_sort.php", "bead_sort.py", "bead_sort.swift", "beadsort_numpy.py", "README.md"], "sorting/bogo_sort": ["bogo_sort.cpp", "bogo_sort.fs", "bogo_sort.go", "bogo_sort.java", "bogo_sort.js", "bogo_sort.m", "bogo_sort.py", "bogo_sort.rb", "bogo_sort.swift", "README.md"], "sorting/bubble_sort": ["bubble_sort.c", "bubble_sort.cpp", "bubble_sort.cs", "bubble_sort.elm", "bubble_sort.exs", "Bubble_sort.f", "bubble_sort.go", "bubble_sort.hs", "bubble_sort.java", "bubble_sort.jl", "bubble_sort.js", "bubble_sort.kt", "bubble_sort.m", "bubble_sort.php", "bubble_sort.py", "bubble_sort.rb", "bubble_sort.rs", "bubble_sort.sh", "bubble_sort.sml", "bubble_sort.swift", "bubble_sort.ts", "efficientbubblesort.cpp", "README.md"], "sorting/bucket_sort": ["bucket_sort.c", "bucket_sort.cpp", "bucket_sort.cs", "bucket_sort.go", "bucket_sort.hs", "bucket_sort.java", "bucket_sort.js", "bucket_sort.m", "bucket_sort.php", "bucket_sort.py", "bucket_sort.rb", "bucket_sort.swift", "README.md"], "sorting/circle_sort": ["circle_sort.c", "circle_sort.cpp", "circle_sort.cs", "circle_sort.java", "circle_sort.js", "circle_sort.m", "circle_sort.py", "circle_sort.swift"], "sorting/comb_sort": ["comb_sort.cpp", "comb_sort.go", "comb_sort.java", "comb_sort.js", "comb_sort.m", "comb_sort.swift", "README.md"], "sorting/counting_sort": ["counting_sort.c", "counting_sort.cpp", "counting_sort.cs", "counting_sort.go", "counting_sort.java", "counting_sort.js", "counting_sort.m", "counting_sort.py", "counting_sort.swift", "README.md"], "sorting/cycle_sort": ["cycle_sort.cpp", "cycle_sort.cs", "cycle_sort.go", "cycle_sort.java", "cycle_sort.js", "cycle_sort.m", "cycle_sort.py", "cycle_sort.swift", "README.md"], "sorting/flash_sort": ["flash_sort.c", "flash_sort.js", "flash_sort.m", "flash_sort.swift", "README.md"], "sorting/gnome_sort": ["gnome_sort.cpp", "gnome_sort.java", "gnome_sort.m", "gnome_sort.py", "gnome_sort.swift"], "sorting/heap_sort": ["heap_sort.c", "heap_sort.cpp", "heap_sort.cs", "heap_sort.go", "heap_sort.java", "heap_sort.js", "heap_sort.m", "heap_sort.py", "heap_sort.rb", "heap_sort.rs", "heap_sort.sc", "heap_sort.swift", "README.md"], "sorting/insertion_sort": ["insertion_sort.c", "insertion_sort.cpp", "insertion_sort.cs", "insertion_sort.go", "insertion_sort.hs", "insertion_sort.java", "insertion_sort.js", "insertion_sort.m", "insertion_sort.ml", "insertion_sort.php", "insertion_sort.py", "insertion_sort.rb", "insertion_sort.rs", "insertion_sort.sh", "insertion_sort.swift", "README.md"], "sorting/intro_sort": ["intro_sort.cpp", "intro_sort.m", "intro_sort.swift"], "sorting/median_sort": ["median_sort.cpp", "median_sort.cs", "median_sort.m", "median_sort.py", "median_sort.swift", "median_sort_fast.cpp"], "sorting/merge_sort": ["merge_sort.c", "merge_sort.cpp", "merge_sort.cs", "merge_sort.fs", "merge_sort.go", "merge_sort.hs", "merge_sort.java", "merge_sort.js", "merge_sort.m", "merge_sort.php", "merge_sort.pl", "merge_sort.py", "merge_sort.rb", "merge_sort.rs", "merge_sort.scala", "merge_sort.swift", "merge_sort.ts", "mergesort_linkedlist.c", "README.md"], "sorting/pigeonhole_sort": ["pigeonhole_sort.c", "pigeonhole_sort.cpp", "pigeonhole_sort.cs", "pigeonhole_sort.java", "pigeonhole_sort.m", "pigeonhole_sort.py", "pigeonhole_sort.swift", "README.md"], "sorting/quick_sort": ["dutch_national_flag.cpp", "quick_sort.c", "quick_sort.cpp", "quick_sort.cs", "quick_sort.elm", "quick_sort.go", "quick_sort.hs", "quick_sort.java", "quick_sort.js", "quick_sort.lua", "quick_sort.m", "quick_sort.ml", "quick_sort.py", "quick_sort.rb", "quick_sort.rs", "quick_sort.scala", "quick_sort.sh", "quick_sort.swift", "quick_sort.ts", "QuickSort_Median_of_Medians.c", "QuicksortInPlace.scala", "README.md", "threeWay_quick_sort.cpp"], "sorting/radix_sort": ["radix_sort.c", "radix_sort.cpp", "radix_sort.go", "radix_sort.hs", "radix_sort.java", "radix_sort.py", "radix_sort.rs", "README.md"], "sorting/selection_sort": ["README.md", "selection_sort.c", "selection_sort.cpp", "selection_sort.cs", "selection_sort.go", "selection_sort.hs", "selection_sort.java", "selection_sort.js", "selection_sort.kt", "selection_sort.m", "selection_sort.php", "selection_sort.py", "selection_sort.rb", "selection_sort.rs", "selection_sort.sh", "selection_sort.swift", "selection_sort.vb"], "sorting/shaker_sort": ["README.md", "shaker_sort.c", "shaker_sort.cpp", "shaker_sort.cs", "shaker_sort.go", "shaker_sort.java", "shaker_sort.js", "shaker_sort.m", "shaker_sort.php", "shaker_sort.py", "shaker_sort.rs", "shaker_sort.swift"], "sorting/shell_sort": ["README.md", "shell_sort.c", "shell_sort.cpp", "shell_sort.go", "shell_sort.java", "shell_sort.js", "shell_sort.m", "shell_sort.py", "shell_sort.swift"], "sorting/sleep_sort": ["README.md", "sleep_sort.c", "sleep_sort.cpp", "sleep_sort.cs", "sleep_sort.go", "sleep_sort.java", "sleep_sort.jl", "sleep_sort.js", "sleep_sort.m", "sleep_sort.php", "sleep_sort.py", "sleep_sort.rb", "sleep_sort.scala", "sleep_sort.sh", "sleep_sort.swift"], "sorting/stooge_sort": ["README.md", "stooge_sort.c", "stooge_sort.go", "stooge_sort.java", "stooge_sort.js", "stooge_sort.py"], "sorting/topological_sort": ["topological_sort.c", "topological_sort.cpp", "topological_sort.java"], "sorting/tree_sort": ["tree_sort.c", "tree_sort.cpp", "tree_sort.go", "tree_sort.java", "tree_sort.js", "tree_sort.py"], "square_root_decomposition/MO's Algorithm": ["MOAlgo.cpp"], "string-algorithms/aho_corasick_algorithm": ["aho_corasick.cpp", "aho_corasick.java", "aho_corasick_algorithm.cpp", "README.md"], "string-algorithms/anagram_search": ["anagram_search.c", "anagram_search.cpp", "anagram_search.cs", "anagram_search.go", "anagram_search.java", "anagram_search.js", "anagram_search.py", "anagram_search.rb", "anagram_search.swift", "README.md"], "string-algorithms/arithmetic_on_large_numbers": ["string_addition.cpp", "string_factorial.cpp", "string_multiplication.cpp", "string_subtract.cpp"], "string-algorithms/boyer_moore_algorithm": ["boyer_moore.c", "boyer_moore_algorithm.cpp", "README.md"], "string-algorithms/finite_automata": ["README.md", "SearchStringUsingDFA.java", "SearchStringUsingDFA.rs"], "string-algorithms/kasai_algorithm": ["README.md"], "string-algorithms/kmp_algorithm": ["kmp.py", "kmp_algorithm.cpp", "README.md"], "string-algorithms/levenshtein_distance": ["LevenshteinDistance.java"], "string-algorithms/lipogram_checker": ["lipogram_checker.cpp", "lipogram_checker.js", "lipogram_checker.py"], "string-algorithms/manachar_algorithm": ["manachar_longest_palindromic_subs.cpp", "manachar_longest_palindromic_subs.py"], "string-algorithms/morse-code": ["morsecode.go", "morsecode.js", "morsecode.py"], "string-algorithms/naive_pattern_search": ["naive_pattern_search.py", "README.md"], "string-algorithms/palindrome_checker": ["palindrome.c", "palindrome.clj", "palindrome.cpp", "palindrome.cs", "palindrome.erl", "palindrome.ex", "palindrome.go", "palindrome.hs", "Palindrome.java", "palindrome.js", "Palindrome.kt", "palindrome.lua", "palindrome.php", "Palindrome.purs", "palindrome.py", "palindrome.rb", "palindrome.rs", "palindrome.sh", "palindrome.swift"], "string-algorithms/pangram_checker": ["pangram-checker.js", "pangram.cpp", "Pangram.java", "pangram.rb", "pangram_checker.c", "pangram_checker.go", "pangram_checker.m", "pangram_checker.py", "pangram_checker.swift"], "string-algorithms/password_strength_checker": ["pw_checker.cpp", "pw_checker.java", "pw_checker.js", "pw_checker.py", "README.md"], "string-algorithms/rabin_karp_algorithm": ["rabin-karp.c", "rabin_karp.py", "RabinKarp.java", "README.md"], "string-algorithms/suffix_array": ["README.md", "suffixArray.java"], "string-algorithms/trie_pattern_search": ["README.md", "trie.cpp"], "string-algorithms/z_algorithm": ["README.md", "Z-algo.cpp", "Z_Algorithm.py", "z_algorithm_z_array.cpp"], "unclassified/average": ["average.c", "average.cpp", "average.erl", "average.es6.js", "average.ex", "average.go", "average.java", "average.js", "average.php", "average.py", "average.rb", "average.rs", "average.scala", "average.swift"], "unclassified/biggest_Of_N_Numbers": ["biggest_Of_N_Numbers.c"], "unclassified/biggest_suffix": ["biggest_suffix.c"], "unclassified/fifteen_puzzle": ["fifteen.c", "log.txt", "Makefile", "readme.md"], "unclassified/jaccard-similarity": ["jaccard.c", "jaccard.java", "jaccard.py", "README.md"], "unclassified/josephus_problem": ["josephus.c", "josephus.cpp", "josephus.go", "josephus.py"], "unclassified/magic_square": ["magic_square.c", "magic_square.php", "magic_square.py", "magic_square.swift"], "unclassified/majority_element": ["majority_element.cpp"], "unclassified/minimum_subarray_size_with_degree": ["minSubarraySizeWithDegree.cpp"], "unclassified/paint_fill": ["paint_fill.cpp"], "unclassified/spiral_printing": ["spiral.c", "spiral_print.cpp", "spiral_print.go", "spiral_print_array.py"], "unclassified/split_list": ["split_list.py"], "unclassified/tokenizer": ["string_tokenizer.cpp"], "unclassified/utilities": ["convert2mp3.sh", "download_link.sh"]}